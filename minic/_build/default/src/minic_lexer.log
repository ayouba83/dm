This is METAFONT, Version 2.7182818 (TeX Live 2019/Debian) (preloaded base=mf 2021.11.21)  26 NOV 2021 00:05
**minic_lexer.ml
(minic_lexer.ml
>> #1
! Isolated expression.
<to be read again> 
                   "src/minic_lexer.mll"
l.1 # 1 "src/minic_lexer.mll"
                             
? 
! Extra tokens will be flushed.
<to be read again> 
                   "src/minic_lexer.mll"
l.1 # 1 "src/minic_lexer.mll"
                             
? q
OK, entering batchmode...

! Interruption.
l.1 # 1 "src/minic_lexer.mll"
                             
? q
OK, entering batchmode...
! Text line contains an invalid character.
l.6 ...ion auxiliaire pour rassembler les mots-clÃ
                                                  ©s
A funny symbol that I can't read has just been input.
Continue, and I'll forget that it ever happened.

! Text line contains an invalid character.
l.6 ...on auxiliaire pour rassembler les mots-clÃ©
                                                  s
A funny symbol that I can't read has just been input.
Continue, and I'll forget that it ever happened.

! Text line contains an invalid character.
l.7      Ã
          € COMPLÃ‰TER
A funny symbol that I can't read has just been input.
Continue, and I'll forget that it ever happened.

! Text line contains an invalid character.
l.7      Ã€
            COMPLÃ‰TER
A funny symbol that I can't read has just been input.
Continue, and I'll forget that it ever happened.

! Text line contains an invalid character.
l.7      Ã€ COMPLÃ
                  ‰TER
A funny symbol that I can't read has just been input.
Continue, and I'll forget that it ever happened.

! Text line contains an invalid character.
l.7      Ã€ COMPLÃ‰
                   TER
A funny symbol that I can't read has just been input.
Continue, and I'll forget that it ever happened.

true
! Extra tokens will be flushed.
<to be read again> 
                   ,
l.13         "true",
                         BOOL_CST true;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

int
! Extra tokens will be flushed.
<to be read again> 
                   ,
l.14         "int",
                         INT;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! A statement can't begin with `]'.
<to be read again> 
                   ]
l.15       ]
             ;
I was looking for the beginning of a new statement.
If you just proceed without changing anything, I'll ignore
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ]
l.15       ]
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! A secondary expression can't begin with `>'.
<inserted text> 
                0
<to be read again> 
                   >
l.16     fun s ->
                 
I'm afraid I need some sort of value in order to continue,
so I've tentatively inserted `0'. You may want to
delete this zero and insert something else;
see Chapter 27 of The METAFONTbook for an example.

! A secondary expression can't begin with `>'.
<inserted text> 
                0
<to be read again> 
                   >
l.18       with Not_found ->
                             IDENT(s)
I'm afraid I need some sort of value in order to continue,
so I've tentatively inserted `0'. You may want to
delete this zero and insert something else;
see Chapter 27 of The METAFONTbook for an example.

>> -try.Hashtbl.find.h.s.with.Not_found+fun.s
! Unknown relation will be considered false.
<to be read again> 
                   >
l.18       with Not_found ->
                             IDENT(s)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> false
>> IDENT
! Not implemented: (boolean)>(unknown numeric).
<to be read again> 
                   (
l.18       with Not_found -> IDENT(
                                   s)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> IDENT
! Isolated expression.
<to be read again> 
                   (
l.18       with Not_found -> IDENT(
                                   s)
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.18       with Not_found -> IDENT(
                                   s)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Incomplete string token has been flushed.
l.37 ...5\246\255\247\255\248\255\249\255\250\255\
                                                  
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

! Incomplete string token has been flushed.
l.38 ...\078\000\153\000\163\000\002\000\255\255";
                                                  
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

! Incomplete string token has been flushed.
l.40 ...5\255\255\255\255\255\255\255\255\255\255\
                                                  
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

! Incomplete string token has been flushed.
l.41 ...\003\000\002\000\010\000\001\000\255\255";
                                                  
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

! Incomplete string token has been flushed.
l.43 ...0\000\000\000\000\000\000\000\000\000\000\
                                                  
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

! Incomplete string token has been flushed.
l.44 ...\255\255\255\255\255\255\255\255\000\000";
                                                  
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

! Incomplete string token has been flushed.
l.46 ...0\000\000\000\000\000\000\000\000\000\000\
                                                  
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

! Incomplete string token has been flushed.
l.98     \000\000\000\000\000\000\000\000";
                                           
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

! Incomplete string token has been flushed.
l.100 ...\255\255\255\255\255\255\255\255\255\255\
                                                  
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

! Incomplete string token has been flushed.
l.152     \255\255\255\255\255\255\255\255";
                                            
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

>> Lexing.lex_backtrk_code
>> ""
! Equation cannot be performed (numeric=string).
<to be read again> 
                   ;
l.156    "";
            
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> Lexing.lex_default_code
>> ""
! Equation cannot be performed (numeric=string).
<to be read again> 
                   ;
l.158    "";
            
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> Lexing.lex_trans_code
>> ""
! Equation cannot be performed (numeric=string).
<to be read again> 
                   ;
l.160    "";
            
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> Lexing.lex_check_code
>> ""
! Equation cannot be performed (numeric=string).
<to be read again> 
                   ;
l.162    "";
            
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> Lexing.lex_code
>> ""
! Equation cannot be performed (numeric=string).
<to be read again> 
                   ;
l.164    "";
            
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! A statement can't begin with `}'.
<to be read again> 
                   }
l.165 }
       
I was looking for the beginning of a new statement.
If you just proceed without changing anything, I'll ignore
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   }
l.165 }
       
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> token.lexbuf
! Isolated expression.
<to be read again> 
                   )
l.173       ( new_line lexbuf; token lexbuf )
                                             
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   )
l.173       ( new_line lexbuf; token lexbuf )
                                             
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> __ocaml_lex_token_rec.lexbuf.__ocaml_lex_state
! Isolated expression.
<to be read again> 
                   ;
l.244 ;
       ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

>> #69
! Isolated expression.
<to be read again> 
                   "src/minic_lexer.mll"
l.246 # 69 "src/minic_lexer.mll"
                                
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "src/minic_lexer.mll"
l.246 # 69 "src/minic_lexer.mll"
                                
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> loop
! Isolated expression.
<to be read again> 
                   (
l.253     then begin print_token t; loop (
                                          ) end
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.253     then begin print_token t; loop (
                                          ) end
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Forbidden token found while scanning to the end of the statement.
<inserted text> 
                ;
<to be read again> 
                   end
l.253     then begin print_token t; loop () end
                                               
A previous error seems to have propagated,
causing me to read past where you wanted me to stop.
I'll try to recover; but if the error is serious,
you'd better type `E' or `X' now and fix your file.

 )
Output written on minic_lexer.2602gf (0 characters, 108 bytes).
